#!/system/bin/sh
#
# Copyright (c) 2016 Google, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Program: this script is for power supply test case

usage()
{
    echo
    echo "Usage ${0} {case_id|case_type|path|data1|data2}"
    echo "case_id: TestRail test id."
    echo "case_type: Test case type, possible value is r_exist, r_inrange, "
    echo "           r_exactly, w_verify, help."
    echo "path: power supply property path."
    echo "data1: test data for exactly string or minimum value"
    echo "data2: test data for maximum value"
    echo "support cases: 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1230,"
    echo "               1231, 1232, 1233, 1234, 1235, 1236, 1342, 1343, 1344,"
    echo "               1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,"
    echo "               1354, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,"
    echo "               1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,"
    echo "               1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,"
    echo "               1463, 1464, 1465, 2234, 2235, 2261, 2262, 2264, 2265,"
    echo "               2266, 2267, 2268, 2269, 2270, 2271"
    echo

    case ${1} in
    1003)
        echo "Usage ${0} 1003 r_exactly [path] [data]"
        echo "possible status is 'Charging', 'Discharging', 'Not charging',"
        echo "                       'Full'"
        ;;
    1004)
        echo "Usage ${0} 1004 r_exactly [path] [data]"
        echo "possible health is 'Good', 'Overheat', 'Dead', 'Over voltage', "
        echo "                  'Unspecified failure', 'Cold',"
        echo "                  'Watchdog timer expire', 'Safety timer expire'"
        ;;
    1005)
        echo "Usage ${0} 1005 r_exactly [path] [data]"
        echo "data, 1 is present, 0 is not present"
        ;;
    1006)
        echo "Usage ${0} 1006 r_exactly [path] [data]"
        echo "data, 1 is online, 0 is not online"
        echo
        ;;
    1007)
        echo "Usage ${0} 1007 r_exactly [path] [data]"
        echo "data, 1 is authentic, 0 is not authentic"
        ;;
    1008)
        echo "Usage ${0} 1008 r_exactly [path] [data]"
        echo "possible technology is 'NiMH', 'Li-ion', 'Li-poly','LiFe', "
        echo "                       'NiCd', 'LiMn'"
        ;;
    1009)
        echo "Usage ${0} 1009 r_inrange [path] [data1] [data2]"
        echo "complete charge cycle counter should between data1 and data2"
        ;;
    1010)
        echo "Usage ${0} 1010 r_inrange [path] [data1] [data2]"
        echo "maximum voltage should between data1 and data2"
        ;;
    1230)
        echo "Usage ${0} 1230 r_inrange [path] [data1] [data2]"
        echo "minimum voltage should between data1 and data2"
        ;;
    1231)
        echo "Usage ${0} 1231 r_exactly [path] [data]"
        echo "data is maximum vlotage "
        ;;
    1232)
        echo "Usage ${0} 1232 r_exactly [path] [data]"
        echo "data is minimum vlotage"
        ;;
    1233)
        echo "Usage ${0} 1233 r_inrange [path] [data1] [data2]"
        echo "current voltage should between data1 and data2"
        ;;
    1234)
        echo "Usage ${0} 1234 r_inrange [path] [data1] [data2]"
        echo "average voltage should between data1 and data2"
        ;;
    1235)
        echo "Usage ${0} 1235 r_inrange [path] [data1] [data2]"
        echo "open circuit voltage should between data1 and data2"
        ;;
    1236)
        echo "Usage ${0} 1236 r_exist"
        echo "check max current exists"
        ;;
    1342)
        echo "Usage ${0} 1342 r_exist"
        echo "check current exists";
        ;;
    1343)
        echo "Usage ${0} 1343 r_exist"
        echo "check ave current exists"
        ;;
    1344)
        echo "Usage ${0} 1344 r_inrange [path] [data1] [data2]"
        echo "instantaneous power consumption should between data1 and data2"
        ;;
    1345)
        echo "Usage ${0} 1345 r_inrange [path] [data1] [data2]"
        echo "average power consumption should between data1 and data2"
        ;;
    1346)
        echo "Usage ${0} 1346 r_exactly [path] [data]"
        echo "data is threshold for full charge"
        ;;
    1347)
        echo "Usage ${0} 1347 r_exactly [path] [data]"
        echo "data is threshold for empty charge"
        ;;
    1348)
        echo "Usage ${0} 1348 r_inrange [path] [data1] [data2]"
        echo "maximum charge should between data1 and data2"
        ;;
    1349)
        echo "Usage ${0} 1349 r_inrange [path] [data1] [data2]"
        echo "minimum charge should between data1 and data2"
        ;;
    1350)
        echo "Usage ${0} 1350 r_inrange [path] [data1] [data2]"
        echo "instantaneous charge value should between data1 and data2"
        ;;
    1351)
        echo "Usage ${0} 1351 r_inrange [path] [data1] [data2]"
        echo "average charge value should between data1 and data2"
        ;;
    1352)
        echo "Usage ${0} 1352 r_inrange [path] [data1] [data2]"
        echo "charge counter should between data1 and data2"
        ;;
    1353)
        echo "Usage ${0} 1353 r_exactly [path] [data]"
        echo "data is charge current"
        ;;
    1354)
        echo "Usage ${0} 1354 r_exactly [path] [data]"
        echo "data is maximum charge current supported"
        ;;
    1437)
        echo "Usage ${0} 1437 r_exactly [path] [data]"
        echo "data is Charge Voltage"
        ;;
    1438)
        echo "Usage ${0} 1438 r_exactly [path] [data]"
        echo "data is maximum charge voltage supported"
        ;;
    1439)
        echo "Usage ${0} 1439 r_exactly [path] [data]"
        echo "data is current charge control limit"
        ;;
    1440)
        echo "Usage ${0} 1440 r_exactly [path] [data]"
        echo "data is maximum charge control limit"
        ;;
     1441)
        echo "Usage ${0} 1441 r_exactly [path] [data]"
        echo "data is threshold for full energy"
        ;;
    1442)
        echo "Usage ${0} 1442 r_exactly [path] [data]"
        echo "data is threshold for empty energy"
        ;;
    1443)
        echo "Usage ${0} 1443 r_inrange [path] [data1] [data2]"
        echo "maximum energy should between data1 and data2"
        ;;
    1444)
        echo "Usage ${0} 1444 r_inrange [path] [data1] [data2]"
        echo "minimum energy should between data1 and data2"
        ;;
    1445)
        echo "Usage ${0} 1445 r_inrange [path] [data1] [data2]"
        echo "instantaneous energy value should between data1 and data2"
        ;;
    1446)
        echo "Usage ${0} 1446 r_inrange [path] [data1] [data2]"
        echo "average energy value should between data1 and data2"
        ;;
    1447)
        echo "Usage ${0} 1447 r_inrange [path] [data1] [data2]"
        echo "capacity percent should between data1 and data2"
        ;;
    1448)
        echo "Usage ${0} 1448 r_exactly [path] [data]"
        echo "data is minimum capacity alert value"
        ;;
    1449)
        echo "Usage ${0} 1449 r_exactly [path] [data]"
        echo "data is maximum capacity alert value"
        ;;
    1450)
        echo "Usage ${0} 1450 r_exactly [path] [data]"
        echo "possible value is 'Critical', 'Low', 'Normal', 'High', 'Full'"
        ;;
    1451)
        echo "Usage ${0} 1451 r_inrange [path] [data1] [data2]"
        echo "temperature should between data1 and data2"
        ;;
    1452)
        echo "Usage ${0} 1452 r_exactly [path] [data]"
        echo "data is shutdown temperature"
        ;;
    1453)
        echo "Usage ${0} 1453 r_exactly [path] [data]"
        echo "data is minimum temperature alert"
        ;;
    1454)
        echo "Usage ${0} 1454 r_inrange [path] [data1] [data2]"
        echo "ambient temperature should between data1 and data2"
        ;;
    1455)
        echo "Usage ${0} 1438 r_exactly [path] [data]"
        echo "data is minimum ambient temperature alert"
        ;;
    1456)
        echo "Usage ${0} 1438 r_exactly [path] [data]"
        echo "data is maximum ambient temperature alert"
        ;;
    1457)
        echo "Usage ${0} 1457 r_inrange [path] [data1] [data2]"
        echo "instant seconds left to be considered emptyshould between "
        echo "data1 and data2"
        ;;
    1458)
        echo "Usage ${0} 1458 r_inrange [path] [data1] [data2]"
        echo "average seconds left to be considered empty should between "
        echo "data1 and data2"
        ;;
    1459)
        echo "Usage ${0} 1459 r_inrange [path] [data1] [data2]"
        echo "instant seconds left to be considered full should between "
        echo "data1 and data2"
        ;;
    1460)
        echo "Usage ${0} 1460 r_inrange [path] [data1] [data2]"
        echo "average seconds left to be considered full should between "
        echo "data1 and data2"
        ;;
    1461)
        echo "Usage ${0} 1461 r_exactly [path] [data]"
        echo "possible value is 'Battery', 'UPS', 'Mains', 'USB', 'USB_DCP',"
        echo "                  'USB_CDP', 'USB_ACA'"
        ;;
    1462)
        echo "Usage ${0} 1462 r_exactly [path] [data]"
        echo "possible value is 'System', 'Device'"
        ;;
    1463)
        echo "Usage ${0} 1463 r_exactly [path] [data]"
        echo "data is manufacturer name"
        ;;
    1464)
        echo "Usage ${0} 1464 r_exactly [path] [data]"
        echo "data is model name"
        ;;
    1465)
        echo "Usage ${0} 1465 r_exactly [path] [data]"
        echo "data is serial Number"
        ;;
    2234| 2235| 2261| 2262| 2264| 2265| 2266| 2267| 2268| 2269| 2270| 2271)
        echo "Usage ${0} [case_id] w_verify [path] [data]"
        echo "data is set value"
        ;;
    *)
        ;;
    esac
    echo
}

printlog()
{
    case ${2} in
    0)
        echo "[A][ARA-${1}][pass]"
        ;;
    1)
        if [ "${3}" == "" ]; then
            echo "[A][ARA-${1}][fail]"
        else
            echo "[A][ARA-${1}][fail][${3}]"
        fi
        ;;
    *)
        ;;
    esac
    echo
}

stringvalidated()
{
    if [ "${2}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No such file or directory"
        return
    fi

    if [ "${3}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No correct input data"
        return
    fi

    value=`cat ${2}`
    echo "[D][ARA-${1}][read ${2} is ${value}]"

    if [ "${value}" == "${3}" ]; then
        printlog ${1} 0
    else
        printlog ${1} 1
    fi
}

rangevalidated()
{
    if [ "${2}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No such file or directory"
        return
    fi

    if [ "${3}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No correct input data"
        return
    elif [ "${4}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No correct input data"
        return
    fi

    value=`cat ${2}`
    echo "[D][ARA-${1}][read ${2} is ${value}]"

    if [ "${value}" == "" ]; then
        printlog ${1} 1 "No such file or directory"
    elif [ "${value}" -lt "${3}" ]; then
        printlog ${1} 1
    elif [ "${value}" -gt "${4}" ]; then
        printlog ${1} 1
    else
        printlog ${1} 0
    fi
}

isexist()
{
    if [ "${2}" == "" ]; then
        usage ${1}
        printlog ${1} 1 "No such file or directory"
        return
    fi

    value=`cat ${2}`
    echo "[D][ARA-${1}][read ${2} is ${value}]"

    if [ "${value}" == "" ]; then
        printlog ${1} 1 "No such file or directory"
    else
        printlog ${1} 0
    fi
}

write()
{
    if [ "${2}" == "" ]; then
        printlog ${1} 1 "No such file or directory"
        return
    fi

    if [ "${3}" == "" ]; then
        printlog ${1} 1 "No correct input data"
        return
    fi

    ori=`cat ${2}`
    echo "[D][ARA-${1}][read ${2} original is ${ori}]"

    if [ "${ori}" == "" ]; then
        printlog ${1} 1 "No such file or directory"
        return
    fi

    echo ${3} > ${2}

    value=`cat ${2}`
    echo "[D][ARA-${1}][read ${2} now is ${value}]"

    echo ${ori} > ${2}

    if [ "${value}" == "${3}" ]; then
        printlog ${1} 0
    else
        printlog ${1} 1
    fi
}

echo

case ${2} in
r_exist)
    isexist ${1} ${3}
    ;;
r_inrange)
    rangevalidated ${1} ${3} ${4} ${5}
    ;;
r_exactly)
    stringvalidated ${1} ${3} ${4}
    ;;
w_verify)
    write ${1} ${3} ${4}
    ;;
help| h| ?)
    usage ${1}
    ;;
*)
    usage
    ;;
esac
